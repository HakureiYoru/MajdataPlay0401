<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedBass.Asio</name>
    </assembly>
    <members>
        <member name="T:ManagedBass.Asio.AsioNotifyProcedure">
            <summary>
            User defined notification callback function (to be used with <see cref="M:ManagedBass.Asio.BassAsio.SetNotify(ManagedBass.Asio.AsioNotifyProcedure,System.IntPtr)" />).
            </summary>
            <param name="Notify">The notification.</param>
            <param name="User">The User instance data given when <see cref="M:ManagedBass.Asio.BassAsio.SetNotify(ManagedBass.Asio.AsioNotifyProcedure,System.IntPtr)" /> was called.</param>
            <remarks>
            When using multiple devices, <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> can be used to determine which the notification applies to.
            </remarks>
        </member>
        <member name="T:ManagedBass.Asio.AsioProcedure">
            <summary>
            User defined ASIO channel callback function (to be used with <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" />).
            </summary>
            <param name="Input">Dealing with an Input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The Input/output channel number... 0 = first.</param>
            <param name="Buffer">The pointer to the Buffer containing the recorded data (Input channel), or in which to put the data to output (output channel).</param>
            <param name="Length">The number of bytes to process.</param>
            <param name="User">The User instance data given when <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" /> was called.</param>
            <returns>The number of bytes written (ignored with Input channels).</returns>
            <remarks>
            <para>ASIO is a low latency system, so a channel callback function should obviously be as quick as possible. <see cref="P:ManagedBass.Asio.BassAsio.CPUUsage" /> can be used to monitor that.</para>
            <para>
            When multiple channels are joined together, the sample data of the channels is interleaved;
            the channel that was enabled via <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" /> comes first, followed by the channels that have been joined to it.
            The order of the joined channels defaults to numerically ascending order unless the <see cref="F:ManagedBass.Asio.AsioInitFlags.JoinOrder"/> flag was used in the <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call,
            in which case they will be in the order in which <see cref="M:ManagedBass.Asio.BassAsio.ChannelJoin(System.Boolean,System.Int32,System.Int32)" /> was called to join then.
            </para>
            <para>
            When an output channel's function returns less data than requested, the remainder of the Buffer is filled with silence, and some processing is saved by that. 
            When 0 is returned, the level of processing is the same as if the channel had been paused with <see cref="M:ManagedBass.Asio.BassAsio.ChannelPause(System.Boolean,System.Int32)" />, ie. the ASIO Buffer is simply filled with silence and all additional processing (resampling/etc) is bypassed.
            </para>
            <para>
            ASIO is a low latency system, so a channel callback function should obviously be as quick as possible. 
            <see cref="P:ManagedBass.Asio.BassAsio.CPUUsage" /> can be used to monitor that.
            Do not call the <see cref="M:ManagedBass.Asio.BassAsio.Stop" /> or <see cref="M:ManagedBass.Asio.BassAsio.Free" /> functions from within an ASIO callback. 
            Also, if it is an output channel, <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetFormat(System.Boolean,System.Int32,ManagedBass.Asio.AsioSampleFormat)" /> and <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetRate(System.Boolean,System.Int32,System.Double)" /> should not be used on the channel being processed by the callback.
            </para>
            <para>
            Prior to calling this function, BassAsio will set the thread's device context to the device that the channel belongs to.
            So when using multiple devices, <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> can be used to determine which device the channel is on.
            </para>
            </remarks>
        </member>
        <member name="T:ManagedBass.Asio.AsioChannelActive">
            <summary>
            BassAsio active values return by <see cref="M:ManagedBass.Asio.BassAsio.ChannelIsActive(System.Boolean,System.Int32)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelActive.Disabled">
            <summary>
            The channel is not enabled.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelActive.Enabled">
            <summary>
            The channel is enabled.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelActive.Paused">
            <summary>
            The channel is enabled and paused.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelGetLevelFlags.Rms">
            <summary>
            Applied to the channel handle when requesting <see cref="M:ManagedBass.Asio.BassAsio.ChannelGetLevel(System.Boolean,System.Int32)"/> to obtain RMS values instead of peak values.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioChannelResetFlags">
            <summary>
            BassAsio attributes to be used when to reset a channel with <see cref="M:ManagedBass.Asio.BassAsio.ChannelReset(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelResetFlags)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Enable">
            <summary>
            Disable Channel
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Join">
            <summary>
            Unjoin Channel
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Pause">
            <summary>
            Unpause Channel
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Format">
            <summary>
            Reset sample format to native format
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Rate">
            <summary>
            Reset sample rate to device rate
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Volume">
            <summary>
            Reset Volume to 1.0
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelResetFlags.Joined">
            <summary>
            Apply to joined channels too
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioFuture">
            <summary>
            BassAsio Future values that might be used with the <see cref="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)" /> method.
            <para>Note: Other/Additional values might be possible - see your drivers manual for details.</para>
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.EnableTimeCodeRead">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.DisableTimeCodeRead">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.SetInputMonitor">
            <summary>
            ASIOInputMonitor* in params
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.Transport">
            <summary>
            ASIOTransportParameters* in params
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.SetInputGain">
            <summary>
            ASIOChannelControls* in params, apply gain
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.GetInputMeter">
            <summary>
            ASIOChannelControls* in params, fill meter
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.SetOutputGain">
            <summary>
            ASIOChannelControls* in params, apply gain
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.GetOutputMeter">
            <summary>
            ASIOChannelControls* in params, fill meter
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanInputMonitor">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanTimeInfo">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanTimeCode">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanTransport">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanInputGain">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanInputMeter">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanOutputGain">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanOutputMeter">
            <summary>
            No arguments
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.SetIoFormat">
            <summary>
            DSD support: ASIOIoFormat * in params
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.GetIoFormat">
            <summary>
            DSD support: ASIOIoFormat * in params
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioFuture.CanDoIoFormat">
            <summary>
            DSD support: ASIOIoFormat * in params
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioInitFlags">
            <summary>
            Initialization flags to be used with <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" />
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInitFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInitFlags.Thread">
            <summary>
            Host driver in dedicated thread
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInitFlags.JoinOrder">
            <summary>
            Order joined channels by when they were joined
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioIOFormatType">
            <summary>
            Asio IO Format type to be used with <see cref="F:ManagedBass.Asio.AsioIOFormat.FormatType"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioIOFormatType.PCM">
            <summary>
            PCM.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioIOFormatType.DSD">
            <summary>
            DSD.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioIOFormatType.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioNotify">
            <summary>
            BassAsio notify values as used in the <see cref="T:ManagedBass.Asio.AsioNotifyProcedure" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioNotify.Rate">
            <summary>
            The device's sample rate has changed.
            The new rate is available from <see cref="P:ManagedBass.Asio.BassAsio.Rate" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioNotify.Reset">
            <summary>
            The driver has requested a reset/reinitialization;
            for example, following a change of the default Buffer size.
            This request can be ignored, but if a reinitialization is performed, it should not be done within the callback.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioSampleFormat">
            <summary>
            BassAsio sample formats to be used with <see cref="T:ManagedBass.Asio.AsioChannelInfo" /> and <see cref="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelInfo@)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.Unknown">
            <summary>
            Unknown format. Error.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.Bit16">
            <summary>
            16-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.Bit24">
            <summary>
            24-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.Bit32">
            <summary>
            32-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.Float">
            <summary>
            32-bit floating-point.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.DSD_LSB">
            <summary>
            DSD (LSB 1st)
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioSampleFormat.DSD_MSB">
            <summary>
            DSD (MSB 1st)
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioTransportCommand">
            <summary>
            Asio Transport Command to be used with <see cref="T:ManagedBass.Asio.AsioTransportParameters"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.Locate">
            <summary>
            Locate
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.PunchIn">
            <summary>
            Punch in
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.PunchOut">
            <summary>
            Punch out
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.ArmOn">
            <summary>
            Arm on
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.ArmOff">
            <summary>
            Arm off
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.MonitorOn">
            <summary>
            Monitor on
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.MonitorOff">
            <summary>
            Monitor off
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.Arm">
            <summary>
            Arm
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportCommand.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.BassAsio">
            <summary>
            BassAsio makes it simple to use ASIO hardware, drivers, and can be used with or without BASS.
            </summary>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.AddDevice(System.Guid,System.String,System.String)">
            <summary>
            Adds a driver to the device list.
            </summary>
            <param name="ClsID">The driver's class ID.</param>
            <param name="Driver">The filename of the driver.</param>
            <param name="Name">An optional description of the driver.</param>
            <returns>
            If successful, the new device number is returned (which might be used in a subsequent <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call), else -1 is returned.
            Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.
            </returns>
            <remarks>
            <para>A list of installed ASIO drivers is kept in the Windows registry, which is where BassAsio gets its device list from, 
            but it is also possible to add unregistered drivers (eg. private drivers) to the list via this function. 
            If successful, the returned device number can be used in a <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call to use the driver.</para>
            <para>The <paramref name="Driver"/> and <patamref name="Name"/> strings are expected to be in Unicode from.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.FileOpen">The <paramref name="Driver" /> file does not exist.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.CheckRate(System.Double)">
            <summary>
            Checks if a sample rate is supported by the device.
            </summary>
            <param name="Rate">The sample rate to check.</param>
            <returns>If the sample rate is supported, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The sample rate is not supported by the device/drivers.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ControlPanel">
            <summary>
            Displays the current Asio driver's control panel.
            </summary>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.LastError">
            <summary>
            Retrieves the error code for the most recent BassAsio function call in the current thread.
            </summary>
            <returns>
            If no error occured during the last BassAsio function call then <see cref="F:ManagedBass.Errors.OK"/> is returned, else one of the <see cref="T:ManagedBass.Errors" /> values is returned. 
            See the function description for an explanation of what the error code means.
            </returns>
            <remarks>Error codes are stored for each thread. So if you happen to call 2 or more BassAsio functions at the same time, they will not interfere with eachother's error codes.</remarks>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Free">
            <summary>
            Releases the Asio device/driver.
            </summary>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>Make sure to free each Asio device you have initialized with <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" />, <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> is used to switch the current device.</remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)"/> has not been successfully called.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)">
            <summary>
            Provides access to the driver's 'future' function.
            </summary>
            <param name="Selector">Operation code.</param>
            <param name="Param">Pointer to the operation's parameters, if applicable.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>This method is a general purpose extension method serving various purposes.</remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The <paramref name="Selector" /> is not supported by the driver.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.CPUUsage">
            <summary>
            Retrieves the current CPU usage of BASSASIO.
            </summary>
            <returns>The BASSASIO CPU usage as a percentage of total CPU time.</returns>
            <remarks>This function includes the time taken by the <see cref="T:ManagedBass.Asio.AsioProcedure" /> callback functions.</remarks>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.CurrentDevice">
            <summary>
            Gets or Sets the Asio device to use for subsequent calls in the current thread... 0 = first device.
            </summary>
            <remarks>
            <para>Throws <see cref="T:ManagedBass.BassException"/> on Error while setting value.</para>
            <para>
            As in BASS, simultaneously using multiple devices is supported in the BASSASIO API via a context switching system - instead of there being an extra "device" parameter in the function calls, the device to be used needs to be set via this function prior to calling the function.
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </para>
            <para>
            The device context setting is used by any function that may result in a <see cref="F:ManagedBass.Errors.Init"/> error (except this function), which is the majority of them.
            When one if those functions is called, it will check the current thread's device setting, and if no device is selected (or the selected device is not initialized), BassAsio will automatically select the lowest device that is initialized. 
            This means that when using a single device, there is no need to use this function - BassAsio will automatically use the device that's initialized.
            Even if you free the device, and initialize another, BassAsio will automatically switch to the one that is initialized.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init">The device has not been initialized or there are no initialised devices.</exception>
            <exception cref="F:ManagedBass.Errors.Device">The device number specified is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32,ManagedBass.Asio.AsioDeviceInfo@)">
            <summary>
            Retrieves information on an Asio device.
            </summary>
            <param name="Device">The device to get the information of... 0 = first.</param>
            <param name="Info">An instance of the <see cref="T:ManagedBass.Asio.AsioDeviceInfo" /> structure to store the information at.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            This function can be used to enumerate the available Asio devices for a setup dialog. 
            </remarks>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device"/> number specified is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32)">
            <summary>
            Retrieves information on an Asio device.
            </summary>
            <param name="Device">The device to get the information of... 0 = first.</param>
            <returns>An instance of the <see cref="T:ManagedBass.Asio.AsioDeviceInfo" /> structure is returned. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <remarks>
            This function can be used to enumerate the available Asio devices for a setup dialog.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device"/> number specified is invalid.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.DeviceCount">
            <summary>
            Returns the total number of available Asio devices.
            </summary>
            <returns>Number of ASIO devices available.</returns>
            <remarks>Uses <see cref="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32,ManagedBass.Asio.AsioDeviceInfo@)" /> internally.</remarks>        
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.GetInfo(ManagedBass.Asio.AsioInfo@)">
            <summary>
            Retrieves information on the Asio device being used.
            </summary>
            <param name="Info">An instance of the <see cref="T:ManagedBass.BassInfo" /> structure to store the information at.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            As in BASS, simultaneously using multiple devices is supported in the BASSASIO API via a context switching system - instead of there being an extra "device" parameter in the function calls, the device to be used needs to be set via <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> prior to calling the function.
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.Info">
            <summary>
            Retrieves information on the Asio device being used.
            </summary>
            <returns>An instance of the <see cref="T:ManagedBass.Asio.AsioInfo" /> structure. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <remarks>
            As in BASS, simultaneously using multiple devices is supported in the BASSASIO API via a context switching system - instead of there being an extra "device" parameter in the function calls, the device to be used needs to be set via <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> prior to calling the function.
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.GetLatency(System.Boolean)">
            <summary>
            Retrieves the latency of input or output channels of the current Asio device
            </summary>
            <param name="Input">Get the input latency? <see langword="false" /> = the output latency.</param>
            <returns>If successful, the latency in samples is returned, else -1 is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            The latency is the delay between the sound being recorded and reaching an <see cref="T:ManagedBass.Asio.AsioProcedure" />, in the case of input channels.
            And the delay between the sample data being fed to an <see cref="T:ManagedBass.Asio.AsioProcedure" /> and actually being heard, in the case of output channels. 
            The latency is dependant on the buffer size, as specified in the <see cref="M:ManagedBass.Asio.BassAsio.Start(System.Int32,System.Int32)" /> call.
            So the latency should be checked after making that call, not before.
            </para>
            <para>
            The latency time can by calculated be dividing the sample latency by the device sample rate.
            When a channel is being resampled, the sample latency will change, but the effective latency time remains constant.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.Rate">
            <summary>
            Gets or Sets the current Asio device's sample rate.
            </summary>
            <remarks>
            <para>Throws <see cref="T:ManagedBass.BassException"/> on Error while setting value.</para>
            When it's not possible to set the device to the rate wanted, this can be used to overcome that.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The sample rate is not supported by the device/drivers.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.Version">
            <summary>
            Gets the version of BassAsio that is Loaded.
            </summary>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)">
            <summary>
            Initializes an Asio device/driver.
            </summary>
            <param name="Device">The device to use... 0 = first device. <see cref="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32,ManagedBass.Asio.AsioDeviceInfo@)" /> can be used to get the total number of devices.</param>
            <param name="Flags">Any combination of <see cref="T:ManagedBass.Asio.AsioInitFlags"/>.</param>
            <returns>If the device was successfully initialized, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>This function must be successfully called before any input or output can be performed.</para>
            <para>
            The ASIO driver is accessed via a COM object using the single-threaded apartment model, which means that requests to the driver go through the thread that initialized it, so the thread needs to exist as long as the driver remains initialized.
            The thread should also have a message queue.
            If device initializing and releasing from multiple threads is required, or the application does not have a message queue (eg. a console application), then the <see cref="F:ManagedBass.Asio.AsioInitFlags.Thread"/> flag can be used to have BassAsio create a dedicated thread to host the ASIO driver.
            </para>
            <para>
            Simultaneously using multiple devices is supported in the BassAsio API via a context switching system - instead of there being an extra "device" parameter in the function calls, the device to be used is set prior to calling the functions.
            <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> is used to switch the current device. 
            When successful, the current thread's device is set to the one that was just initialized.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device" /> number specified is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Already">A device has already been initialized. You must call <see cref="M:ManagedBass.Asio.BassAsio.Free" /> before you can initialize again.</exception>
            <exception cref="F:ManagedBass.Errors.Driver">The driver couldn't be initialized.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.IsStarted">
            <summary>
            Checks, if the current Asio device has been started.
            </summary>
            <returns>Returns <see langword="true" />, if the device has been started, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Monitor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the direct input monitoring state.
            </summary>
            <param name="Input">The input channel to set the monitoring state of... -1 = all.</param>
            <param name="Output">The suggested output channel for the monitoring.</param>
            <param name="Gain">Suggested Gain, ranging from 0 to 0x7fffffff (-inf to +12 dB), 0x20000000 equals 0 dB.</param>
            <param name="State">Monitoring state... 0 = off, 1 = on. Other settings may be possible depending on the drivers, e.g.:
            <para>0 = input monitoring off.</para>
            <para>1 = input monitoring on.</para>
            <para>2 = playback monitoring off.</para>
            <para>3 = playback monitoring on.</para>
            </param>
            <param name="Pan">Suggested Pan, ranging from 0 = left to 0x7fffffff = right (centre should be 0x40000000).</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            If the hardware does not support patching and mixing a straight 1 to 1 routing is suggested. 
            The driver should ignore all the information of ASIOMonitor it cannot deal with, usually these might be either or all of output, gain, pan.
            <para>
            Output is the base channel of a stereo channel pair, i.e. output is always an even channel (0,2,4...). 
            If an odd input channel should be monitored and no panning or output routing can be applied, the driver has to use the next higher output (imply a hard right pan).
            Note that the output, gain and pan settings are just suggestions, and may be ignored by the device/driver.
            </para>
            <para>Some cards/drivers might also support direct output monitoring, in such case use the <paramref name="Input" /> parameter to denote the output channel to monitor and specify an appropriate <paramref name="State" /> value.</para>
            <para>
            ADM has originally been based on a mono in - stereo out scheme. Meaning if you need to monitor a stereo input channel pair you need to call this twice, both using the same output value, but using an odd and an even input value.
            In such case set the odd input to pan hard left and the even input to pan hard right.
            </para>
            <para>
            Also note, that if you have channels in-between not activated in ASIO these will not counted. 
            So if for example channels 3 and 4 are inactive, ADM input 3 is related to the physical input channel 5!
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.SetDSD(System.Boolean)">
            <summary>
            Sets the device's sample format to DSD or PCM.
            </summary>
            <param name="DSD">Set the sample format to DSD?</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            When a device is switched between PCM and DSD formats, the ASIO channels' format will change accordingly, as reported by <see cref="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelInfo@)" />.
            Any <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetFormat(System.Boolean,System.Int32,ManagedBass.Asio.AsioSampleFormat)" /> and <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetRate(System.Boolean,System.Int32,System.Double)" /> settings that have been applied will be reset to defaults. 
            Other channel settings are unchanged.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">DSD is not supported by the device/driver.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.SetNotify(ManagedBass.Asio.AsioNotifyProcedure,System.IntPtr)">
            <summary>
            Sets a notification callback on the ASIO driver.
            </summary>
            <param name="Procedure">User defined notification function... <see langword="null"/> = disable notifications.</param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>A previously set notification callback can be changed (or removed) at any time, by calling this function again.</remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
        </member>
        <member name="P:ManagedBass.Asio.BassAsio.Unicode">
            <summary>
            Gets or Sets the character set used in device information text: if <see langword="false"/>, ANSI is used (default), else UTF-16 is used.
            </summary>
            <remarks>
            <para>Throws <see cref="T:ManagedBass.BassException"/> on Error setting value.</para>
            This function determines the character set that is used in the <see cref="T:ManagedBass.Asio.AsioDeviceInfo" /> structure and in <see cref="M:ManagedBass.Asio.BassAsio.AddDevice(System.Guid,System.String,System.String)" /> function calls.
            It does not affect ASIO channel names in the <see cref="T:ManagedBass.Asio.AsioChannelInfo" /> and <see cref="T:ManagedBass.Asio.AsioInfo" /> structure.
            <para>The character set choice is finalised in the first <see cref="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32,ManagedBass.Asio.AsioDeviceInfo@)" />, <see cref="M:ManagedBass.Asio.BassAsio.AddDevice(System.Guid,System.String,System.String)" /> or <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call, and it cannot be changed after that.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.NotAvailable">This function is only available before any devices have been enumerated.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Start(System.Int32,System.Int32)">
            <summary>
            Starts the current Asio device.
            </summary>
            <param name="BufferLength">Buffer length in samples... 0 = use current length.</param>
            <param name="Threads">The number of processing threads to use... 0 = use current number.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            Before starting the device, channels must be enabled using <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" />.
            Once started, channels can't be enabled or disabled until the device is stopped, using <see cref="M:ManagedBass.Asio.BassAsio.Stop" />.
            <para>
            The default number of processing threads is 1, which means that the <see cref="T:ManagedBass.Asio.AsioProcedure" /> functions of the enabled channels get called in series (starting with the lowest input channel).
            Multiple channels can be processed in parallel if multiple threads are created for that purpose via the threads parameter.
            The number of threads is automatically capped at the number of enabled channels with an <see cref="T:ManagedBass.Asio.AsioProcedure" /> function, which is sufficient to have them all processed simultaneously.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Already">The device has already been started.</exception>
            <exception cref="F:ManagedBass.Errors.NoChannel">No channels have been enabled.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Stop">
            <summary>
            Stops the current Asio device.
            </summary>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            As in BASS, simultaneously using multiple devices is supported in the BASSASIO API via a context switching system - instead of there being an extra "device" parameter in the function calls, 
            the device to be used needs to be set via <see cref="P:ManagedBass.Asio.BassAsio.CurrentDevice" /> prior to calling the function. 
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device hasn't been started.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.Lock(System.Boolean)">
            <summary>
            Locks the device to the current thread.
            </summary>
            <remarks>
            Locking a device prevents other threads from performing most functions on it, including the channel processing.
            Other threads wanting to access a locked device will block until it is unlocked, so it should only be locked very briefly.
            A device must be unlocked in the same thread that it was locked.
            </remarks>
            <param name="Lock">If <see langword="false"/>, unlock the device, else lock it.</param>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <returns>If successful, <see langword="true"/> is returned, else <see langword="false"/> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError"/>.</returns>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)">
            <summary>
            Enable/disable processing of an Asio channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Procedure">The user defined function to process the channel... <see langword="null" /> = disable the channel.</param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            All ASIO channels are mono.
            Stereo (and above) channels can be formed by joining multiple channels together using <see cref="M:ManagedBass.Asio.BassAsio.ChannelJoin(System.Boolean,System.Int32,System.Int32)" />.
            </para>
            <para>Use <see cref="M:ManagedBass.Asio.BassAsio.Start(System.Int32,System.Int32)" /> to begin processing the enabled channels.</para>
            <para>
            You might also use this function on an already enabled ASIO channel if you just want to change the <see cref="T:ManagedBass.Asio.AsioProcedure" /> which should be used.
            However changing the callback procedure to <see langword="null" /> would disable the channel - which is only possible, if the ASIO device is stopped.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device has been started - it needs to be stopped before (dis)enabling channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelEnableBass(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables a channel, and sets it to use a BASS channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Handle">The BASS channel handle.</param>
            <param name="Join">Join the next ASIO channels according to the number of audio channels in the BASS channel?</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            This function allows BASS channels to be used directly, without needing an <see cref="T:ManagedBass.Asio.AsioProcedure"/> callback function. The ASIO channel's format and rate are set accordingly.
            If the BASS channel is not mono then multiple ASIO channels should also be joined accordingly. That can be done automatically via the join parameter, or manually
            with <see cref="M:ManagedBass.Asio.BassAsio.ChannelJoin(System.Boolean,System.Int32,System.Int32)"/>. If the device does not have enough channels, the BASSmix add-on can be used to downmix the BASS channel.
            </para>
            <para>
            In the case of output channels, the BASS channel must have the <see cref="F:ManagedBass.BassFlags.Decode"/> flag set. In the case of input channels, the BASS channel must be a "push" stream,
            created with <see cref="M:ManagedBass.Bass.CreateStream(System.Int32,System.Int32,ManagedBass.BassFlags,ManagedBass.StreamProcedureType)"/> and <see cref="F:ManagedBass.StreamProcedureType.Push"/>, which will receive the data from the input channel(s).
            </para>
            <para>
            Raw DSD streams are supported (with the BASSDSD add-on) but the device needs to have been successfully set to DSD mode first with <see cref="M:ManagedBass.Asio.BassAsio.SetDSD(System.Boolean)"/>.
            The device's sample rate should also be set to the DSD stream's rate (its BASS_ATTRIB_DSD_RATE attribute) via <see cref="P:ManagedBass.Asio.BassAsio.Rate"/>.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device has been started - it needs to be stopped before (dis)enabling channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Handle">Handle is invalid</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">8-bit BASS channels are not supported; the <see cref="F:ManagedBass.BassFlags.Float"/> flag can be used to avoid them.</exception>
            <exception cref="F:ManagedBass.Errors.NoChannel">The device does not have enough channels to accommodate the BASS channel.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelEnableMirror(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Enables an output channel, and makes it mirror another channel.
            </summary>
            <param name="Channel">The output channel number... 0 = first.</param>
            <param name="Input2">Mirroring an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel2">The channel to mirror.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            This function allows an input or output channel to be duplicated in other output channel.
            This can be achieved using normal <see cref="T:ManagedBass.Asio.AsioProcedure" /> processing, but it's more efficient to let BassAsio simply copy the data from one channel to another.
            </para>
            <para>
            Mirror channels can't be joined together to form multi-channel mirrors.
            Instead, to mirror multiple channels, an individual mirror should be setup for each of them.
            </para>
            <para>After <see cref="M:ManagedBass.Asio.BassAsio.Start(System.Int32,System.Int32)" /> has been called to begin processing, it's not possible to setup new mirror channels, but it is still possible to change the channel that a mirror is mirroring.</para>
            <para>
            When mirroring an output channel that hasn't been enabled, the mirror channel will just produce silence.
            When mirroring an input channel that hasn't already been enabled, the channel is automatically enabled for processing when <see cref="M:ManagedBass.Asio.BassAsio.Start(System.Int32,System.Int32)" /> is called, so that it can be mirrored.
            If the mirror is switched to a disabled input channel once processing has begun, then it will produce silence.
            </para>
            <para>
            A mirror channel can be made to have a different volume level to the channel that it's mirroring, using <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetVolume(System.Boolean,System.Int32,System.Double)" />.
            The volume setting is cumulative.
            For example, if the mirror channel has a volume setting of 0.5 and the mirrored channel has a volume setting of 0.4, the effective volume of the mirror channel will be 0.2 (0.5 x 0.4).
            </para>
            <para><see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" /> can be used to disable a mirror channel.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device has been started - it needs to be stopped before enabling channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">At least one of the channels is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">It is not possible to mirror channels that do not have the same sample format.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetFormat(System.Boolean,System.Int32)">
            <summary>
            Retrieves a channel's sample format.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <returns>If an error occurs, -1 (<see cref="F:ManagedBass.Asio.AsioSampleFormat.Unknown"/>) is returned, use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelInfo@)">
            <summary>
            Retrieves information on an Asio channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Info">An instance of the <see cref="T:ManagedBass.Asio.AsioChannelInfo" /> structure to store the information at.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32)">
            <summary>
            Retrieves information on an Asio channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <returns>An instance of the <see cref="T:ManagedBass.Asio.AsioChannelInfo" /> structure is returned. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetLevel(System.Boolean,System.Int32)">
            <summary>
            Retrieves the level (peak amplitude) of a channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first. The <see cref="F:ManagedBass.Asio.AsioChannelGetLevelFlags.Rms"/> flag can optionally be used to get the RMS level, otherwise the peak level is given.</param>
            <returns>
            If an error occurs, -1 is returned, use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code. 
            If successful, the level of the channel is returned, ranging from 0 (silent) to 1 (max).
            If the channel's native sample format is floating-point, it is actually possible for the level to go above 1.
            </returns>
            <remarks>
            This function measures the level of a single channel, and is not affected by any other channels that are joined with it.
            <para>Volume settings made via <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetVolume(System.Boolean,System.Int32,System.Double)" /> affect the level reading of output channels, but not input channels.</para>
            <para>
            When an input channel is paused, it is still possible to get its level.
            Paused output channels will have a level of 0.
            </para>
            <para>Level retrieval is not supported when the sample format is DSD.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device hasn't been started, or the channel isn't enabled.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">Level retrieval is not supported for the channel's sample format (please report).</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetRate(System.Boolean,System.Int32)">
            <summary>
            Retrieves a channel's sample rate.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <returns>If succesful, the channel's sample rate is returned (0 = device rate), else -1 is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelGetVolume(System.Boolean,System.Int32)">
            <summary>
            Retrieves a channel's volume setting.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first, -1 = master.</param>
            <returns>If successful, the channel's volume setting is returned, else -1 is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>To set a channel volume use <see cref="M:ManagedBass.Asio.BassAsio.ChannelSetVolume(System.Boolean,System.Int32,System.Double)" />.</remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelIsActive(System.Boolean,System.Int32)">
            <summary>
            Checks if a channel is enabled for processing.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <returns>One <see cref="T:ManagedBass.Asio.AsioChannelActive"/> value is returned.</returns>
            <remarks>
            When a channel is joined to another, the status of the other channel is returned, as that is what determines whether the channel is enabled for processing - whether it's been enabled itself is of no consequence while it is joined to another. 
            For example, if channel B is joined to channel A, and channel A is not enabled, then neither is channel B.
            </remarks>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelJoin(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Join a channel to another.
            </summary>
            <param name="Input">Dealing with input channels? <see langword="false" /> = output channels.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Channel2">The channel to join it to... -1 = remove current join.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            All ASIO channels are mono.
            By joining them, stereo (and above) channels can be formed, making it simpler to process stereo (and above) sample data.
            </para>
            <para>
            By default, channels can only be joined to preceding channels.
            For example, channel 1 can be joined to channel 0, but not vice versa.
            The <see cref="F:ManagedBass.Asio.AsioInitFlags.JoinOrder"/> flag can be used in the <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call to remove that restriction.
            When joining a group of channels, there should be one channel enabled via <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnable(System.Boolean,System.Int32,ManagedBass.Asio.AsioProcedure,System.IntPtr)" /> with the rest joined to it - 
            do not join a channel to a channel that is itself joined to another channel.
            Mirror channels, setup using <see cref="M:ManagedBass.Asio.BassAsio.ChannelEnableMirror(System.Int32,System.Boolean,System.Int32)" />, cannot be joined with.
            </para>
            <para>
            If a channel has two or more other channels joined to it, then the joined channels will default to being in numerically ascending order in the <see cref="T:ManagedBass.Asio.AsioProcedure" /> callback function's sample data unless the <see cref="F:ManagedBass.Asio.AsioInitFlags.JoinOrder"/> flag was used in the <see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> call, 
            in which case they will be in the order in which they were joined via this function.
            In the latter case, if this function is called on an already joined channel, the channel will be moved to the end of the joined group.
            </para>
            <para>
            While a channel is joined to another, it automatically takes on the attributes of the other channel - the other channel's settings determine the sample format, the sample rate and whether it is enabled.
            The volume setting remains individual though, allowing balance control over the joined channels.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device has been started - it needs to be stopped before (dis)enabling channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">It is not possible to join channels that do not have the same sample format.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelPause(System.Boolean,System.Int32)">
            <summary>
            Suspends processing of a channel.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Channels can only be disabled when the device is stopped.
            When you want to stop processing only some of the enabled channels, there are few ways that could be done.
            You could quickly stop the device, disable the unwanted channels, and restart the device. 
            In the case of output channels, you could fill the channels' buffers with silence (0s) in the <see cref="T:ManagedBass.Asio.AsioProcedure" />.
            Or you could pause the channels, using this function. 
            The less channels BassAsio has to process, the less CPU it'll use, so stopping and restarting the device would be the most efficient, but that could cause a slight break in the sound of the other channels. 
            Filling the buffers with silence is the least efficient, as BassAsio will still process the data as if it was "normal", but it does mean that other channels are unaffected.
            Pausing is a compromise between the two - the channels will still be enabled, but BassAsio will bypass any additional processing (resampling/etc) that may normally be required.</para>
            <para>Use <see cref="M:ManagedBass.Asio.BassAsio.ChannelReset(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelResetFlags)" /> to resume processing of a paused channel.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelReset(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelResetFlags)">
            <summary>
            Resets the attributes of a channel (or all channels).
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first, -1 = all channels.</param>
            <param name="Flags">The attributes to reset. A combination of <see cref="T:ManagedBass.Asio.AsioChannelResetFlags"/>.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>When resetting all channels (channel = -1), the resetting only applies to all channels of the specified type, ie. input or output, not both.</remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device has been started - it needs to be stopped before disabling or unjoining channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelSetFormat(System.Boolean,System.Int32,ManagedBass.Asio.AsioSampleFormat)">
            <summary>
            Sets a channel's sample format.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Format">The sample format.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            The sample format can vary between ASIO devices/drivers, which could mean a lot of extra/duplicate code being required.
            To avoid that extra work, BassAsio can automatically convert the sample data, whenever necessary, to/from a format of your choice. 
            The native format of a channel can be retrieved via <see cref="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelInfo@)" />.
            </para>
            <para>
            The PCM format options are only available when the device's format is PCM, and the DSD format options are only available when the device's format is DSD. 
            If a device supports both, it can be switched between DSD and PCM via <see cref="M:ManagedBass.Asio.BassAsio.SetDSD(System.Boolean)" />.
            </para>
            <para>For performance reasons, it's best not to use 24-bit sample data whenever possible, as 24-bit data requires a bit more processing than the other formats.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination, or <paramref name="Format" /> is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">Format conversion is not available for the channel's native sample format (please report).</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelSetRate(System.Boolean,System.Int32,System.Double)">
            <summary>
            Sets a channel's sample rate.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first.</param>
            <param name="Rate">The sample rate... 0 = device rate.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            For optimal quality and performance, it is best to set the device to the sample rate you want via <see cref="P:ManagedBass.Asio.BassAsio.Rate" />, but that's not always possible. 
            Which is where this function and resampling comes into play.
            16 point sinc interpolation is used, giving a good blend of sound quality and performance.
            It is also SSE2 and 3DNow optimized for an extra boost with supporting CPUs.
            </para>
            <para>When a channel's sample rate is the same as the device rate, resampling is bypassed, so there's no unnecessary performance hit.</para>
            <para>Resampling is not supported when the sample format is DSD.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid, or <paramref name="Rate" /> is below 0.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">Format conversion is not available for the channel's native sample format (please report).</exception>
        </member>
        <member name="M:ManagedBass.Asio.BassAsio.ChannelSetVolume(System.Boolean,System.Int32,System.Double)">
            <summary>
            Sets a channel's volume.
            </summary>
            <param name="Input">Dealing with an input channel? <see langword="false" /> = an output channel.</param>
            <param name="Channel">The input/output channel number... 0 = first, -1 = master.</param>
            <param name="Volume">The volume level... 0 (silent)...1.0 (normal). Above 1.0 amplifies the sound.</param>
            <returns>If succesful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Asio.BassAsio.LastError" /> to get the error code.</returns>
            <remarks>
            <para></para>
            <para>
            Apart from the master volume (channel = -1), this function applies a volume level to a single channel, and does not affect any other channels that are joined with it. 
            This allows balance control over joined channels, by setting the individual volume levels accordingly.
            The final level of a channel is = master volume * channel volume.
            </para>
            <para>The volume "curve" is linear, but logarithmic levels can be easily used. See the example below.</para>
            <para>
            ASIO drivers do not provide volume control themselves, so the volume adjustments are applied to the sample data by BassAsio. 
            This also means that changes do not persist across sessions, and the channel volume levels will always start at 1.0.
            </para>
            <para>When the channel's sample format is DSD, a 0 volume setting will mute the channel and anything else will be treated as 1.0 (normal).</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Asio.BassAsio.Init(System.Int32,ManagedBass.Asio.AsioInitFlags)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">The <paramref name="Input" /> and <paramref name="Channel" /> combination is invalid, or <paramref name="Volume" /> is below 0.</exception>
        </member>
        <member name="T:ManagedBass.Asio.AsioChannelControls">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)" /> and the Get/SetInput resp. Get/SetOutput selector.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelControls.Channel">
            <summary>
            the channel index
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelControls.IsInput">
            <summary>
            TRUE = Input, FALSE = Output
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelControls.Gain">
            <summary>
            the gain value, ranging 0 - 0x7fffffffL (-inf to +12 dB)
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelControls.Meter">
            <summary>
            returned meter value, ranging 0 - 0x7fffffffL (-inf to +12 dB)
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioChannelControls.Future">
            <summary>
            up to 32 chars
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioChannelInfo">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.ChannelGetInfo(System.Boolean,System.Int32,ManagedBass.Asio.AsioChannelInfo@)" /> to retrieve information on the current device.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioChannelInfo.Group">
            <summary>
            The channel's group.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioChannelInfo.Format">
            <summary>
            The channel's sample format
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioChannelInfo.Name">
            <summary>
            The name of the channel.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioDeviceInfo">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.GetDeviceInfo(System.Int32,ManagedBass.Asio.AsioDeviceInfo@)" /> to retrieve information on an asio device.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioDeviceInfo.Name">
            <summary>
            The description of the device.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioDeviceInfo.Driver">
            <summary>
            The filename of the driver being used.
            <para>Further information can be obtained from the file using the GetFileVersionInfo Win32 API function.</para>
            </summary>
        </member>
        <member name="M:ManagedBass.Asio.AsioDeviceInfo.ToString">
            <summary>
            Returns the <see cref="P:ManagedBass.Asio.AsioDeviceInfo.Name"/> of the device.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioInfo">
            <summary>
            Used with <see cref="P:ManagedBass.Asio.BassAsio.Info" /> to retrieve information on the current device.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.InitFlags">
            <summary>
            Flags used when initialising the AsioDevice.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.Name">
            <summary>
            The name of the device/driver.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.DriverVersion">
            <summary>
            The driver version.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.Inputs">
            <summary>
            The number of input channels available.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.Outputs">
            <summary>
            The number of output channels available.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.MinBufferLength">
            <summary>
            The minimum Buffer Length, in samples.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.MaxBufferLength">
            <summary>
            The maximum Buffer Length, in samples.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.PreferredBufferLength">
            <summary>
            The preferred/default Buffer Length, in samples.
            </summary>
        </member>
        <member name="P:ManagedBass.Asio.AsioInfo.BufferLengthGranularity">
            <summary>
            The Buffer Length granularity, that is the smallest possible Length change... -1 = the possible Buffer lengths increase in powers of 2.
            </summary>
        </member>
        <member name="M:ManagedBass.Asio.AsioInfo.ToString">
            <summary>
            Returns the <see cref="P:ManagedBass.Asio.AsioInfo.Name"/> of the AsioDevice.
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioInputMonitor">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)" /> and the SetInputMonitor selector.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInputMonitor.Input">
            <summary>
            this Input was set to monitor (or off), -1: all
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInputMonitor.Output">
            <summary>
            suggested output for monitoring the Input (if so)
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInputMonitor.Gain">
            <summary>
            suggested gain, ranging 0 - 0x7fffffffL (-inf to +12 dB)
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInputMonitor.State">
            <summary>
            TRUE = on, FALSE = off
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioInputMonitor.Pan">
            <summary>
            suggested pan, 0 = all left, 0x7fffffff = right
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioIOFormat">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)" /> and the DSD IoFormat selector.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioIOFormat.FormatType">
            <summary>
            Format Type
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioIOFormat.Future">
            <summary>
            up to 508 chars
            </summary>
        </member>
        <member name="T:ManagedBass.Asio.AsioTransportParameters">
            <summary>
            Used with <see cref="M:ManagedBass.Asio.BassAsio.Future(ManagedBass.Asio.AsioFuture,System.IntPtr)" /> and the Transport selector.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportParameters.command">
            <summary>
            One of the <see cref="T:ManagedBass.Asio.AsioTransportCommand"/> values (other values might be available).
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportParameters.SamplePosition">
            <summary>
            Number of samples data.
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportParameters.Track">
            <summary>
            Track Index
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportParameters.TrackSwitches">
            <summary>
            512 Tracks on/off
            </summary>
        </member>
        <member name="F:ManagedBass.Asio.AsioTransportParameters.Future">
            <summary>
            Max 64 characters.
            </summary>
        </member>
    </members>
</doc>
