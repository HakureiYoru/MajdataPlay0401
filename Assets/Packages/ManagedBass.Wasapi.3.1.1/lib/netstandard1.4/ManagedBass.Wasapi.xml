<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedBass.Wasapi</name>
    </assembly>
    <members>
        <member name="T:ManagedBass.Wasapi.BassWasapi">
            <summary>
            Wraps basswasapi.dll: Windows Audio Session API driver library
            </summary>
            <remarks>
            <para>BASSWASAPI is basically a wrapper for Windows Audio Session API drivers, with the addition of channel joining, format conversion and resampling.</para>
            <para>
            BASSWASAPI requires a soundcard with a Windows Session API drivers installed (Vista or above).
            It also makes use of SSE2 and 3DNow optimizations, but is fully functional without them.
            BASS is not required by BASSWASAPI, but BASS can of course be used to decode, apply DSP/FX, etc.
            </para>
            </remarks>
        </member>
        <member name="F:ManagedBass.Wasapi.BassWasapi.DefaultDevice">
            <summary>
            Identifier for Default Device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.BassWasapi.DefaultInputDevice">
            <summary>
            Identifier for Default Recording Device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.BassWasapi.DefaultLoopbackDevice">
            <summary>
            Identifier for Default Loopback Device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.BassWasapi.WasapiProc_Push">
            <summary>
            Instead of BASSWASAPI pulling data from a WASAPIPROC function, data is pushed to
            BASSWASAPI via BASS_WASAPI_PutData. This cannot be used with input devices or the
            BASS_WASAPI_EVENT flag. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.BassWasapi.WasapiProc_Bass">
            <summary>
            Feed data to/from a BASS channel, specified in the user parameter.
            It must be a decoding channel (using BASS_STREAM_DECODE) for an output device,
            or a "push" or "dummy" stream (using STREAMPROC_PUSH or STREAMPROC_DUMMY) for
            an input device. The freq and chans parameters are ignored and the sample format
            of the BASS channel is used instead, but it must be floating-point (BASS_SAMPLE_FLOAT).  
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.CPUUsage">
            <summary>
            Retrieves the current CPU usage of BASSWASAPI.
            </summary>
            <returns>The BASSWASAPI CPU usage as a percentage of total CPU time.</returns>
            <remarks>This function includes the time taken by the <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> callback functions.</remarks>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice">
            <summary>
            Gets or Sets the Wasapi device to use for susequent calls in the current thread... 0 = first device. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.
            </summary>
            <remarks>
            <para>Throws <see cref="T:ManagedBass.BassException"/> on Error setting value.</para>
            <para>
            Simultaneously using multiple devices is supported in the BASS API via a context switching system;
            instead of there being an extra "device" parameter in the function calls, the device to be used is set prior to calling the functions.
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </para>
            <para>
            All of the BassWasapi functions that do not have their own "device" parameter make use of this device selection.
            When one of them is called, BassWasapi will check the current thread's device setting, and if no device is selected (or the selected device is not initialized), BassWasapi will automatically select the lowest device that is initialized.
            This means that when using a single device, there is no need to use this function;
            BassWasapi will automatically use the device that is initialized.
            Even if you free the device, and initialize another, BassWasapi will automatically switch to the one that is initialized.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Device">The device number specified is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)">
            <summary>
            Retrieves information on a Wasapi device (endpoint).
            </summary>
            <param name="Device">The device to get the information of... 0 = first.</param>
            <param name="Info">An instance of the <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo" /> class to store the information at.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This function can be used to enumerate the available Wasapi devices (endpoints) for a setup dialog. 
            <para>Note: Input (capture) devices can be determined by evaluating <see cref="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsInput"/> and <see cref="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsLoopback"/> members.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available</exception>
            <exception cref="F:ManagedBass.Errors.Device">The device number specified is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32)">
            <summary>
            Retrieves information on a Wasapi device (endpoint).
            </summary>
            <param name="Device">The device to get the information of... 0 = first.</param>
            <returns>An instance of <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo"/> structure is returned. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <remarks>
            This function can be used to enumerate the available Wasapi devices (endpoints) for a setup dialog. 
            <para>Note: Input (capture) devices can be determined by evaluating <see cref="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsInput"/> and <see cref="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsLoopback"/> members.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available</exception>
            <exception cref="F:ManagedBass.Errors.Device">The device number specified is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.SetNotify(ManagedBass.Wasapi.WasapiNotifyProcedure,System.IntPtr)">
            <summary>
            Sets a device change notification callback.
            </summary>
            <param name="Procedure">User defined notification function... <see langword="null" /> = disable notifications.</param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>A previously set notification callback can be changed (or removed) at any time, by calling this function again.</remarks>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.DeviceCount">
            <summary>
            Gets the total number of available Wasapi devices.
            </summary>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.CheckFormat(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags)">
            <summary>
            Checks if a particular sample format is supported by a device (endpoint).
            </summary>
            <param name="Device">The device to use... 0 = first device, -1 = default device, -2 = default input device. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" /> can be used to enumerate the available devices.</param>
            <param name="Frequency">The sample rate to check.</param>
            <param name="Channels">The number of channels to check... 1 = mono, 2 = stereo, etc.</param>
            <param name="Flags">
            Any combination of <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Shared"/> and <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Exclusive"/>.
            The HIWORD can be used to limit the sample formats that are checked in exclusive mode.
            The default is to check 32-bit floating-point, 32-bit integer, 24-bit integer, 16-bit integer, 8-bit integer, in that order.
            A <see cref="T:ManagedBass.Wasapi.WasapiFormat"/> value can be used to bypass the formats that precede it in that list.
            </param>
            <returns>If the sample format is supported, the maximum supported resolution (a <see cref="T:ManagedBass.Wasapi.WasapiFormat" /> value) is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Call this method prior to <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> in order to make sure the requested format is supported by the Wasapi output device/driver (endpoint).
            <para>
            Shared and exclusive modes may have different sample formats available.
            Only the "mix format" (available from <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" />) is generally supported in shared mode.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available.</exception>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device" /> number specified is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Driver">The driver could not be initialized.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">Unsupported sample format or number of channels.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetInfo(ManagedBass.Wasapi.WasapiInfo@)">
            <summary>
            Retrieves information on the Wasapi device being used.
            </summary>
            <param name="Info">An instance of the <see cref="T:ManagedBass.Wasapi.WasapiInfo" /> structure to store the information at.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This method can be used to get the effective settings used with an initialized Wasapi device (endpoint).
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.Info">
            <summary>
            Retrieves information on the Wasapi device being used.
            </summary>
            <returns>An instance of the <see cref="T:ManagedBass.Wasapi.WasapiInfo" /> structure is returned. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <remarks>
            This method can be used to get the effective settings used with an initialized Wasapi device (endpoint).
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.Free">
            <summary>
            Frees the Wasapi device/driver (endpoint).
            </summary>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This function should be called for all initialized devices before the program closes.
            Freed devices do not need to have been stopped with <see cref="M:ManagedBass.Wasapi.BassWasapi.Stop(System.Boolean)" /> beforehand.
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)">
            <summary>
            Retrieves the immediate sample data (or an FFT representation of it) of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Buffer">An <see cref="T:System.IntPtr"/> to write the data to.</param>
            <param name="Length">Number of bytes wanted, and/or <see cref="T:ManagedBass.DataFlags"/>.</param>
            <returns>
            If an error occurs, -1 is returned, use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code. 
            <para>When requesting FFT data, the number of bytes read from the device (to perform the FFT) is returned.</para>
            <para>When requesting sample data, the number of bytes written to buffer will be returned (not necessarily the same as the number of bytes read when using the <see cref="F:ManagedBass.DataFlags.Float"/> flag).</para>
            <para>When using the <see cref="F:ManagedBass.DataFlags.Available"/> flag, the number of bytes in the device's buffer is returned.</para>
            </returns>
            <remarks>
            <para>
            This function is like the standard <see cref="M:ManagedBass.Bass.ChannelGetData(System.Int32,System.IntPtr,System.Int32)" />, but it gets the data from the device's buffer instead of decoding it from a channel, 
            which means that the device doesn't miss out on any data.
            In order to do this, the device must have buffering enabled, via the <see cref="F:ManagedBass.BassFlags.MixerBuffer"/> flag.
            </para>
            <para>
            Internally, a BASS stream is used for that, so the usual <see cref="T:ManagedBass.DataFlags"/> are supported.
            That also means that BASS needs to have been initialized first; it specifically uses the <see cref="F:ManagedBass.Bass.NoSoundDevice"/>. 
            If the device is subsequently freed, this method call will fail.
            </para>
            <para>
            As in BASS, simultaneously using multiple devices is supported in the BASSWASAPI API via a context switching system - instead of there being an extra "device" parameter in the function calls, 
            the device to be used needs to be set via <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> prior to calling the function. 
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device was not initialized using buffering (<see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/>).</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetData(System.Single[],System.Int32)">
            <summary>
            Retrieves the immediate sample data (or an FFT representation of it) of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Buffer">A float[] to write the data to.</param>
            <param name="Length">Number of bytes wanted, and/or <see cref="T:ManagedBass.DataFlags"/>.</param>
            <returns>
            If an error occurs, -1 is returned, use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code. 
            <para>When requesting FFT data, the number of bytes read from the device (to perform the FFT) is returned.</para>
            <para>When requesting sample data, the number of bytes written to buffer will be returned (not necessarily the same as the number of bytes read when using the <see cref="F:ManagedBass.DataFlags.Float"/> flag).</para>
            <para>When using the <see cref="F:ManagedBass.DataFlags.Available"/> flag, the number of bytes in the device's buffer is returned.</para>
            </returns>
            <remarks>
            <para>
            This function is like the standard <see cref="M:ManagedBass.Bass.ChannelGetData(System.Int32,System.IntPtr,System.Int32)" />, but it gets the data from the device's buffer instead of decoding it from a channel, 
            which means that the device doesn't miss out on any data.
            In order to do this, the device must have buffering enabled, via the <see cref="F:ManagedBass.BassFlags.MixerBuffer"/> flag.
            </para>
            <para>
            Internally, a BASS stream is used for that, so the usual <see cref="T:ManagedBass.DataFlags"/> are supported.
            That also means that BASS needs to have been initialized first; it specifically uses the <see cref="F:ManagedBass.Bass.NoSoundDevice"/>. 
            If the device is subsequently freed, this method call will fail.
            </para>
            <para>
            As in BASS, simultaneously using multiple devices is supported in the BASSWASAPI API via a context switching system - instead of there being an extra "device" parameter in the function calls, 
            the device to be used needs to be set via <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> prior to calling the function. 
            The device setting is local to the current thread, so calling functions with different devices simultaneously in multiple threads is not a problem.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device was not initialized using buffering (<see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/>).</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)">
            <summary>
            Adds sample data to an output device buffer ("push" device).
            </summary>
            <param name="Buffer">The pointer to the sample data to provide.</param>
            <param name="Length">The amount of data in bytes. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> with the <see cref="F:ManagedBass.DataFlags.Available"/> flag can be used to check how much data is queued.</param>
            <returns>
            If successful, the the amount of data copied from the provided buffer will be returned
            (which may be less than requested if it doesn't all fit in the device buffer, see the <see cref="P:ManagedBass.Wasapi.WasapiInfo.BufferLength"/> property), else -1 is returned.
            Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.
            </returns>
            <remarks>
            You must have initialized the device via <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> with <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> = <see langword="null" />.
            <para>As much data as possible will be placed in the device's buffer; this function will have to be called again for any remainder.</para>
            <para>
            Data should be provided at a rate sufficent to sustain playback.
            If the buffer gets exhausted, ouput will stall until more data is provided.
            <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> with the <see cref="F:ManagedBass.DataFlags.Available"/> flag can be used to check how much data is buffered.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device is being fed by a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> callback function, or it is an input device.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Length" /> is not valid, it must equate to a whole number of samples.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.PutData(System.Single[],System.Int32)">
            <summary>
            Adds sample data to an output device buffer ("push" device).
            </summary>
            <param name="Buffer">float[] providing the sample data.</param>
            <param name="Length">The amount of data in bytes. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> with the <see cref="F:ManagedBass.DataFlags.Available"/> flag can be used to check how much data is queued.</param>
            <returns>
            If successful, the the amount of data copied from the provided buffer will be returned
            (which may be less than requested if it doesn't all fit in the device buffer, see the <see cref="P:ManagedBass.Wasapi.WasapiInfo.BufferLength"/> property), else -1 is returned.
            Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.
            </returns>
            <remarks>
            You must have initialized the device via <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> with <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> = <see langword="null" />.
            <para>As much data as possible will be placed in the device's buffer; this function will have to be called again for any remainder.</para>
            <para>
            Data should be provided at a rate sufficent to sustain playback.
            If the buffer gets exhausted, ouput will stall until more data is provided.
            <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> with the <see cref="F:ManagedBass.DataFlags.Available"/> flag can be used to check how much data is buffered.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device is being fed by a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> callback function, or it is an input device.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Length" /> is not valid, it must equate to a whole number of samples.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.Lock(System.Boolean)">
            <summary>
            Locks the device to the current thread.
            </summary>
            <param name="State">If <see langword="false" />, unlock WASAPI, else lock it.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Locking a device prevents other threads from accessing the device buffer, including a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/>.
            Other threads wanting to access a locked device will block until it is unlocked, so a device should only be locked very briefly.
            A device must be unlocked in the same thread that it was locked.
            </remarks>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetMute(ManagedBass.Wasapi.WasapiVolumeTypes)">
            <summary>
            Gets the mute status of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Mode">The type of volume to get.</param>
            <returns><see langword="true" />, if the device/session is muted and <see langword="false" /> if unmuted, else -1. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">There is no volume control available.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.SetMute(ManagedBass.Wasapi.WasapiVolumeTypes,System.Boolean)">
            <summary>
            Sets the mute status of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Mode">The type of volume to set.</param>
            <param name="Mute"><see langword="true" /> to mute the device, <see langword="false" /> to unmute the device.</param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">There is no volume control available.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetDeviceLevel(System.Int32,System.Int32)">
            <summary>
            Gets the audio meter information of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Device">The device to use... 0 = first device. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" /> can be used to get the total number of devices.</param>
            <param name="Channel">The channel number to get the audio level meter information from (0=first, -1=all).</param>
            <returns>The audio level between 0.0 (silence) and 1.0 (maximum).</returns>
            <remarks>
            This method returns the global session level for the device which might include the level of other applications using the same device in shared-mode.
            <para>
            This function gets the level from the device/driver, or WASAPI if the device does not have its own level meter.
            If the latter case, the level will be unavailable when exclusive mode is active.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available.</exception>
            <exception cref="F:ManagedBass.Errors.Device"><paramref name="Device" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Driver">The device driver does not support level retrieval.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Channel" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetVolume(ManagedBass.Wasapi.WasapiVolumeTypes)">
            <summary>
            Retrieves the current volume level.
            </summary>
            <param name="Curve">Volume curve to use.</param>
            <returns>If successful, the volume level is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Session volume always uses <see cref="F:ManagedBass.Wasapi.WasapiVolumeTypes.WindowsHybridCurve"/>.
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">There is no volume control available.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.SetVolume(ManagedBass.Wasapi.WasapiVolumeTypes,System.Single)">
            <summary>
            Sets the volume of the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Curve">Volume curve to use.</param>
            <param name="Volume">The new volume to set between 0.0 (silent) and 1.0 (maximum) if linear, or else a dB level.</param>
            <returns>Returns <see langword="true" /> on success, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Session volume only affects the current process, so other users of the device are unaffected.
            It has no effect on exclusive mode output, and maps to the device volume with input devices (so does affect other users).
            Session volume always uses <see cref="F:ManagedBass.Wasapi.WasapiVolumeTypes.WindowsHybridCurve"/>.
            If you need to control the volume of the stream only, you need to apply that directly within the <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> yourself.
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">There is no volume control available.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Volume" /> is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)">
            <summary>
            Initializes a Wasapi device/driver (endpoint).
            </summary>
            <param name="Device">The device to use... 0 = first device, -1 = default output device, -2 = default input device. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" /> can be used to enumerate the available devices.</param>
            <param name="Frequency">The sample rate to use... 0 = "mix format" sample rate.</param>
            <param name="Channels">The number of channels to use... 0 = "mix format" channels, 1 = mono, 2 = stereo, etc.</param>
            <param name="Flags">A combination of <see cref="T:ManagedBass.Wasapi.WasapiInitFlags"/>.</param>
            <param name="Buffer">
            The length of the device's buffer in seconds.
            This is a minimum and the driver may choose to use a larger buffer;
            <see cref="P:ManagedBass.Wasapi.BassWasapi.Info" /> can be used to confirm what the buffer size is.
            For an output device, the buffer size determines the latency.
            </param>
            <param name="Period">
            The interval (in seconds) between callback function calls... 0 = use default.
            If the specified period is below the minimum update period, it will automatically be raised to that.
            <para>
            The update period specifies the time between <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> calls.
            The <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo" /> (see <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" />) "minperiod" and "defperiod" values are actually minimum/default update periods.
            </para>
            </param>
            <param name="Procedure">
            The user defined function to process the channel.
            Use <see langword="null" /> to create a Wasapi "push" device (to which you can feed sample data via <see cref="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)" />).
            </param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If the device was successfully initialized, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            For convenience, devices are always initialized to use their highest sample resolution and that is then converted to 32-bit floating-point, so that <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> callback functions and the <see cref="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)" /> and <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> functions are always dealing with the same sample format.
            The device's sample format can be obtained via <see cref="P:ManagedBass.Wasapi.BassWasapi.Info" />.
            </para>
            <para>
            WASAPI does not support arbitrary sample formats, like DirectSound does.
            In particular, only the "mix format" (available from <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" />) is generally supported in shared mode.
            <see cref="M:ManagedBass.Wasapi.BassWasapi.CheckFormat(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags)" /> can be used to check whether a particular sample format is supported.
            The BASSmix add-on can be used to play (or record) in otherwise unsupported sample formats, as well as playing multiple sources.
            </para>
            <para>The initialized device will not begin processing data until <see cref="M:ManagedBass.Wasapi.BassWasapi.Start" /> is called.</para>
            <para>
            Simultaneously using multiple devices is supported in the BASS API via a context switching system; instead of there being an extra "device" parameter in the function calls, the device to be used is set prior to calling the functions.
            <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> is used to switch the current device.
            When successful, <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> automatically sets the current thread's device to the one that was just initialized.
            </para>
            <para>When using the default output or input device, <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> can be used to find out which device it was mapped to.</para>
            <para>In SHARED mode you must initialize the device with the current WASAPI mixer sample rate and number of channels (see the <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo" /> "mixfreq" and "mixchans" properties).</para>
            <para>In EXCLUSIVE mode you might use any sample rate and number of channels which are supported by the device/driver.</para>
            <para>This function must be successfully called before any input or output can be performed.</para>
            <para>
            In EXCLUSIVE mode, the "period" value will affect what's an acceptable "buffer" value (it appears that the buffer must be at least 4x the period).
            In SHARED mode, it's the other way round, the "period" will be reduced to fit the "buffer" if necessary (with a minimum of the "defperiod" value).
            The system will limit them to an acceptable range, so for example, you could use a very small value (eg. 0.0001) for both, to get the minimum possible latency.
            </para>
            <para>
            Note: When initializing an input (capture or loopback) device, it might be the case, that the device is automatically muted once initialized.
            You can use the <see cref="M:ManagedBass.Wasapi.BassWasapi.GetMute(ManagedBass.Wasapi.WasapiVolumeTypes)" />/<see cref="M:ManagedBass.Wasapi.BassWasapi.SetMute(ManagedBass.Wasapi.WasapiVolumeTypes,System.Boolean)" /> methods to check and probably toggle this.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available.</exception>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device" /> number specified is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Already">A device has already been initialized. You must call <see cref="M:ManagedBass.Wasapi.BassWasapi.Free" /> before you can initialize again.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">An illegal parameter was specified (a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> must be provided for an input device).</exception>
            <exception cref="F:ManagedBass.Errors.Driver">The driver could not be initialized.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">The specified format is not supported by the device. If the <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.AutoFormat"/> flag was specified, no other format could be found either.</exception>
            <exception cref="F:ManagedBass.Errors.Init">The <see cref="F:ManagedBass.Bass.NoSoundDevice"/> has not been initialized.</exception>
            <exception cref="F:ManagedBass.Errors.Busy">The device is busy (eg. in "exclusive" use by another process).</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery error.</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.InitEx(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a Wasapi device/driver (endpoint).
            </summary>
            <param name="Device">The device to use... 0 = first device, -1 = default output device, -2 = default input device. <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" /> can be used to enumerate the available devices.</param>
            <param name="Frequency">The sample rate to use... 0 = "mix format" sample rate.</param>
            <param name="Channels">The number of channels to use... 0 = "mix format" channels, 1 = mono, 2 = stereo, etc.</param>
            <param name="Flags">A combination of <see cref="T:ManagedBass.Wasapi.WasapiInitFlags"/>.</param>
            <param name="Buffer">
            The length of the device's buffer in seconds.
            This is a minimum and the driver may choose to use a larger buffer;
            <see cref="P:ManagedBass.Wasapi.BassWasapi.Info" /> can be used to confirm what the buffer size is.
            For an output device, the buffer size determines the latency.
            </param>
            <param name="Period">
            The interval (in seconds) between callback function calls... 0 = use default.
            If the specified period is below the minimum update period, it will automatically be raised to that.
            <para>
            The update period specifies the time between <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> calls.
            The <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo" /> (see <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" />) "minperiod" and "defperiod" values are actually minimum/default update periods.
            </para>
            </param>
            <param name="Procedure">
            The user defined function to process the channel.
            Use <see langword="null" /> to create a Wasapi "push" device (to which you can feed sample data via <see cref="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)" />).
            </param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If the device was successfully initialized, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            For convenience, devices are always initialized to use their highest sample resolution and that is then converted to 32-bit floating-point, so that <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> callback functions and the <see cref="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)" /> and <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> functions are always dealing with the same sample format.
            The device's sample format can be obtained via <see cref="P:ManagedBass.Wasapi.BassWasapi.Info" />.
            </para>
            <para>
            WASAPI does not support arbitrary sample formats, like DirectSound does.
            In particular, only the "mix format" (available from <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" />) is generally supported in shared mode.
            <see cref="M:ManagedBass.Wasapi.BassWasapi.CheckFormat(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags)" /> can be used to check whether a particular sample format is supported.
            The BASSmix add-on can be used to play (or record) in otherwise unsupported sample formats, as well as playing multiple sources.
            </para>
            <para>The initialized device will not begin processing data until <see cref="M:ManagedBass.Wasapi.BassWasapi.Start" /> is called.</para>
            <para>
            Simultaneously using multiple devices is supported in the BASS API via a context switching system; instead of there being an extra "device" parameter in the function calls, the device to be used is set prior to calling the functions.
            <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> is used to switch the current device.
            When successful, <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> automatically sets the current thread's device to the one that was just initialized.
            </para>
            <para>When using the default output or input device, <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> can be used to find out which device it was mapped to.</para>
            <para>In SHARED mode you must initialize the device with the current WASAPI mixer sample rate and number of channels (see the <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo" /> "mixfreq" and "mixchans" properties).</para>
            <para>In EXCLUSIVE mode you might use any sample rate and number of channels which are supported by the device/driver.</para>
            <para>This function must be successfully called before any input or output can be performed.</para>
            <para>
            In EXCLUSIVE mode, the "period" value will affect what's an acceptable "buffer" value (it appears that the buffer must be at least 4x the period).
            In SHARED mode, it's the other way round, the "period" will be reduced to fit the "buffer" if necessary (with a minimum of the "defperiod" value).
            The system will limit them to an acceptable range, so for example, you could use a very small value (eg. 0.0001) for both, to get the minimum possible latency.
            </para>
            <para>
            Note: When initializing an input (capture or loopback) device, it might be the case, that the device is automatically muted once initialized.
            You can use the <see cref="M:ManagedBass.Wasapi.BassWasapi.GetMute(ManagedBass.Wasapi.WasapiVolumeTypes)" />/<see cref="M:ManagedBass.Wasapi.BassWasapi.SetMute(ManagedBass.Wasapi.WasapiVolumeTypes,System.Boolean)" /> methods to check and probably toggle this.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Wasapi">WASAPI is not available.</exception>
            <exception cref="F:ManagedBass.Errors.Device">The <paramref name="Device" /> number specified is invalid.</exception>
            <exception cref="F:ManagedBass.Errors.Already">A device has already been initialized. You must call <see cref="M:ManagedBass.Wasapi.BassWasapi.Free" /> before you can initialize again.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">An illegal parameter was specified (a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> must be provided for an input device).</exception>
            <exception cref="F:ManagedBass.Errors.Driver">The driver could not be initialized.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">The specified format is not supported by the device. If the <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.AutoFormat"/> flag was specified, no other format could be found either.</exception>
            <exception cref="F:ManagedBass.Errors.Init">The <see cref="F:ManagedBass.Bass.NoSoundDevice"/> has not been initialized.</exception>
            <exception cref="F:ManagedBass.Errors.Busy">The device is busy (eg. in "exclusive" use by another process).</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery error.</exception>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.IsStarted">
            <summary>
            Checks, if the current Wasapi device/driver (endpoint) has been already started (via <see cref="M:ManagedBass.Wasapi.BassWasapi.Start" />).
            </summary>
            <returns>Returns <see langword="true" />, if the device has been started, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.Start">
            <summary>
            Starts processing the current Wasapi device/driver (endpoint).
            </summary>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Before starting the device, it must be initialized using <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" />.
            Use <see cref="M:ManagedBass.Wasapi.BassWasapi.Stop(System.Boolean)" /> to stop processing the device.
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.Stop(System.Boolean)">
            <summary>
            Stops the current Wasapi device/driver (endpoint).
            </summary>
            <param name="Reset">Flush the device buffer?
            <para>
            <see langword="true" /> will clear the output buffer.
            Otherwise it is like pausing, eg. <see cref="M:ManagedBass.Wasapi.BassWasapi.Start" /> will resume playing the buffered data.
            </para>
            </param>
            <returns>If successful, then <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>If the device buffer is left unflushed (<paramref name="Reset"/> = <see langword="false"/>), a subsequent <see cref="M:ManagedBass.Wasapi.BassWasapi.Start" /> call will resume things with the buffered data, otherwise it will resume with fresh data.</para>
            <para>When using multiple devices, the current thread's device setting (as set with <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" />) determines which device this function call applies to.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.Start">The device hasn't been started.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetLevel">
            <summary>
            Retrieves the level (peak amplitude) of the current Wasapi device/driver (endpoint).
            </summary>
            <returns>If an error occurs, -1 is returned, use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.
            <para>
            If successful, the level of the left channel is returned in the low word (low 16-bits), and the level of the right channel is returned in the high word (high 16-bits).
            If the channel is mono, then the low word is duplicated in the high word. 
            The level ranges linearly from 0 (silent) to 32768 (max). 0 will be returned when a channel is stalled.
            </para>
            </returns>
            <remarks>
            This function is like the standard <see cref="M:ManagedBass.Bass.ChannelGetLevel(System.Int32)" />, but it gets the level from the devices's buffer instead of decoding data from a channel, which means that the device doesn't miss out on any data. 
            The <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/> flag needs to have been specified in the device's initialization to enable the use of this function.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device was not initialized using buffering (<see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/>).</exception>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetLevel(System.Single[],System.Single,ManagedBass.LevelRetrievalFlags)">
            <summary>
            Retreives the level
            </summary>
            <param name="Levels">An array to receive the levels.</param>
            <param name="Length"></param>
            <param name="Flags"></param>
            <returns>true on success, else false. Use <see cref="P:ManagedBass.Bass.LastError"/> to get the Error code.</returns>
            <remarks>
            This function uses <see cref="M:ManagedBass.Bass.ChannelGetLevel(System.Int32,System.Single[],System.Single,ManagedBass.LevelRetrievalFlags)"/> internally, so it behaves identically to that.
            The <see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/> flag needs to have been specified in the device's initialization to enable the use of this function.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The device was not initialized using buffering (<see cref="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer"/>).</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Length"/> is not valid.</exception>
        </member>
        <member name="P:ManagedBass.Wasapi.BassWasapi.Version">
            <summary>
            Gets the Version of BassWasapi that is loaded.
            </summary>
        </member>
        <member name="M:ManagedBass.Wasapi.BassWasapi.GetBassDevice(System.Int32)">
            <summary>
            Gets the Bass device index for a Wasapi Device.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiNotifyProcedure">
            <summary>
            User defined notification callback function.
            </summary>
            <param name="Notify">The notification</param>
            <param name="Device">The device that the notification applies to.</param>
            <param name="User">The user instance data given when <see cref="M:ManagedBass.Wasapi.BassWasapi.SetNotify(ManagedBass.Wasapi.WasapiNotifyProcedure,System.IntPtr)" /> was called.</param>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiProcedure">
            <summary>
            User defined WASAPI output/input processing callback function (to be used with <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" />).
            </summary>
            <param name="Buffer">Pointer to the buffer to put the sample data for an output device, or to get the data from an input device. The sample data is always 32-bit floating-point.</param>
            <param name="Length">The number of bytes to process.</param>
            <param name="User">The user instance data given when <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> was called.</param>
            <returns>In the case of an output device, the number of bytes written to the buffer. In the case of an input device, 0 = stop the device, else continue.</returns>
            <remarks>
            <para>
            An output/input processing function should obviously be as quick as possible, to avoid buffer underruns (output) or overruns (input).
            Using a larger buffer makes that less crucial.
            <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)" /> (<see cref="F:ManagedBass.DataFlags.Available"/>) can be used to check how much data is buffered.
            </para>
            <para>
            An output device's <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> may return less data than requested, but be careful not to do so by too much, too often.
            If the buffer gets exhausted, output will stall until more data is provided.
            If you do return less than the requested amount of data, the number of bytes should still equate to a whole number of samples.
            </para>
            <para>
            When multiple channels are used, the sample data of the channels is interleaved.
            For example, with 2 channels (ie. stereo), the sample data would be arranged as channel 1, channel 2, channel 1, channel 2, channel 1, etc.
            </para>
            <para>When an output channel needs to be empty/silent but still enabled, the channel's function could fill the buffer with 0s to achieve that.</para>
            <para>Do not call <see cref="M:ManagedBass.Wasapi.BassWasapi.Free" /> from within a callback function.</para>
            <para>
            Prior to calling this function, BassWasapi will set the thread's device context to the device that the channel belongs to.
            So when using multiple devices, <see cref="P:ManagedBass.Wasapi.BassWasapi.CurrentDevice" /> can be used to determine which device the channel is on.
            </para>
            <para>
            It is not supported to change the <see cref="T:ManagedBass.Wasapi.WasapiProcedure" /> once a device was initialized via <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" />.
            If you need to change some internal processing logic during processing, you might use some kind of "if" statements within this callback procedure.
            </para>
            </remarks>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Unknown">
            <summary>
            Unknown flags. 
            e.g. the WASAPI device is not present.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Enabled">
            <summary>
            The WASAPI device is enabled (active).
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Default">
            <summary>
            The WASAPI device is the default device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Initialized">
            <summary>
            The WASAPI device is initialized.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Loopback">
            <summary>
            The WASAPI device is a loopback device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Input">
            <summary>
            The WASAPI device is an Input (capture) device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Unplugged">
            <summary>
            The WASAPI device is unplugged.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceInfoFlags.Disabled">
            <summary>
            The WASAPI device is disabled.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiDeviceType">
            <summary>
            Wasapi Device Type to be used with <see cref="T:ManagedBass.Wasapi.WasapiDeviceInfo"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.NetworkDevice">
            <summary>
            A network device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Speakers">
            <summary>
            A speakers device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.LineLevel">
            <summary>
            A line level device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Headphones">
            <summary>
            A headphone device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Microphone">
            <summary>
            A microphone device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Headset">
            <summary>
            A headset device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Handset">
            <summary>
            A handset device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Digital">
            <summary>
            A digital device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.SPDIF">
            <summary>
            A S/PDIF device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.HDMI">
            <summary>
            A HDMI device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiDeviceType.Unknown">
            <summary>
            An unknown device.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiFormat">
            <summary>
            BassWasapi sample formats to be used with <see cref="T:ManagedBass.Wasapi.WasapiInfo" /> and <see cref="M:ManagedBass.Wasapi.BassWasapi.GetInfo(ManagedBass.Wasapi.WasapiInfo@)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Float">
            <summary>
            32-bit floating-point.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Bit8">
            <summary>
            8-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Bit16">
            <summary>
            16-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Bit24">
            <summary>
            24-bit integer.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiFormat.Bit32">
            <summary>
            32-bit integer.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiInitFlags">
            <summary>
            BassWasapi initialization flags to be used with <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Shared">
            <summary>
            Init the device (endpoint) in shared mode.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Exclusive">
            <summary>
            Init the device (endpoint) in exclusive mode.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.AutoFormat">
            <summary>
            Automatically choose another sample format if the specified format is not supported.
            If possible, a higher sample rate than freq will be used, rather than a lower one.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Buffer">
            <summary>
            Enable double buffering, for use by <see cref="M:ManagedBass.Wasapi.BassWasapi.GetData(System.IntPtr,System.Int32)"/> and <see cref="M:ManagedBass.Wasapi.BassWasapi.GetLevel"/>. 
            This requires the BASS <see cref="F:ManagedBass.Bass.NoSoundDevice"/> device to have been initilized, via <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)"/>.
            Internally, a BASS stream is used for that, so the usual <see cref="T:ManagedBass.DataFlags"/> flags are supported.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.EventDriven">
            <summary>
            Enables the event-driven WASAPI system.
            It is only supported when a <see cref="T:ManagedBass.Wasapi.WasapiProcedure"/> function is provided, ie. not when using <see cref="M:ManagedBass.Wasapi.BassWasapi.PutData(System.IntPtr,System.Int32)"/>.
            When used with shared mode, the User-provided 'Buffer' and 'period' lengths are ignored 
            and WASAPI decides what Buffer to use (<see cref="P:ManagedBass.Wasapi.BassWasapi.Info"/> can be used to check that).
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Samples">
            <summary>
            buffer and period are in samples rather than seconds.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Dither">
            <summary>
            Apply dither (TPDF) when converting floating-point sample data to the device's format.
            This flag only has effect on exclusive mode output.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Raw">
            <summary>
            Request raw mode, which bypasses any sound enhancements that have been enabled on the device. This is only available on Windows 8.1 and above. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.Async">
            <summary>
            Call the callback function asynchronously. This only applies to event-driven exclusive mode output and is otherwise ignored. When enabled,
            a buffer is filled asynchronously in advance. This reduces the chances of underruns but also increases latency by up to one buffer length. If an underrun does occur, a silent buffer (rather than nothing) is still sent to the device, which can prevent sound glitches on some devices following an underrun. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryMask">
            <summary>
            A mask to isolate the category flags. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryOther">
            <summary>
            Other audio stream. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryForegroundMediaOnly">
            <summary>
            Unknown flag.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryBackgroundMediaCapable">
            <summary>
            Unknown flag.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryCommunications">
            <summary>
            Real-time communications, such as VOIP or chat. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryAlerts">
            <summary>
            Alert sounds. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategorySoundEffects">
            <summary>
            Sound effects. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryGameEffects">
            <summary>
            Game sound effects. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryGameMedia">
            <summary>
            Background audio for games. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryGameChat">
            <summary>
            Game chat audio. Similar to COMMUNICATIONS except that this will not attenuate other streams. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategorySpeech">
            <summary>
            Speech. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryMovie">
            <summary>
            Stream that includes audio with dialog. For output devices only. 
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiInitFlags.CategoryMedia">
            <summary>
            Stream that includes audio without dialog. For output devices only. 
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiNotificationType">
            <summary>
            BassWasapi Notification type to be used with <see cref="M:ManagedBass.Wasapi.BassWasapi.SetNotify(ManagedBass.Wasapi.WasapiNotifyProcedure,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiNotificationType.Enabled">
            <summary>
            The device has been enabled.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiNotificationType.Disabled">
            <summary>
            The device has been disabled.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiNotificationType.DefaultOutput">
            <summary>
            The device is now the default Input device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiNotificationType.DefaultInput">
            <summary>
            The device is now the default output device.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiNotificationType.Fail">
            <summary>
            The device has failed and been stopped.
            If the device is still enabled and shared mode was being used, then it may be that the device's sample format has changed.
            It can be freed and reinitialized, with <see cref="M:ManagedBass.Wasapi.BassWasapi.Free"/> and <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)"/>, to resume in that case.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiVolumeTypes">
            <summary>
            The BassWasapi Volume curve to use with <see cref="M:ManagedBass.Wasapi.BassWasapi.GetVolume(ManagedBass.Wasapi.WasapiVolumeTypes)" /> and <see cref="M:ManagedBass.Wasapi.BassWasapi.SetVolume(ManagedBass.Wasapi.WasapiVolumeTypes,System.Single)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiVolumeTypes.Device">
            <summary>
            Use the device volume.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiVolumeTypes.LogaritmicCurve">
            <summary>
            Logarithmic curve.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiVolumeTypes.LinearCurve">
            <summary>
            Linear curve.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiVolumeTypes.WindowsHybridCurve">
            <summary>
            Windows' hybrid curve.
            </summary>
        </member>
        <member name="F:ManagedBass.Wasapi.WasapiVolumeTypes.Session">
            <summary>
            Use the session volume.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiDeviceInfo">
            <summary>
            Used with <see cref="M:ManagedBass.Wasapi.BassWasapi.GetDeviceInfo(System.Int32,ManagedBass.Wasapi.WasapiDeviceInfo@)" /> to retrieve information on a Wasapi device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.Type">
            <summary>
            The Type of the devices.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.MinimumUpdatePeriod">
            <summary>
            The minimum update period (in seconds) of the device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.DefaultUpdatePeriod">
            <summary>
            The default update period (in seconds) of the device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.MixFrequency">
            <summary>
            The shared-mode format mixers sample rate.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.MixChannels">
            <summary>
            The shared-mode format mixers number of channels.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.Name">
            <summary>
            The description of the device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.ID">
            <summary>
            The ID of the driver being used.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsDefault">
            <summary>
            Gets whether the device is the system default device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsEnabled">
            <summary>
            Gets whether the device is enabled.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsInput">
            <summary>
            Gets whether the device is input device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsLoopback">
            <summary>
            Gets whether the device is a loopback device (output capture).
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsInitialized">
            <summary>
            Gets whether the device is initialized (using <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)"/>).
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsUnplugged">
            <summary>
            Gets whether the device is unplugged.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiDeviceInfo.IsDisabled">
            <summary>
            Gets whether the device is disabled.
            </summary>
        </member>
        <member name="M:ManagedBass.Wasapi.WasapiDeviceInfo.ToString">
            <summary>
            Returns the <see cref="P:ManagedBass.Wasapi.WasapiDeviceInfo.Name"/> of the device.
            </summary>
        </member>
        <member name="T:ManagedBass.Wasapi.WasapiInfo">
            <summary>
            Used with <see cref="M:ManagedBass.Wasapi.BassWasapi.GetInfo(ManagedBass.Wasapi.WasapiInfo@)" /> to retrieve information on the current device.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.InitFlags">
            <summary>
            The flags parameter of the <see cref="M:ManagedBass.Wasapi.BassWasapi.Init(System.Int32,System.Int32,System.Int32,ManagedBass.Wasapi.WasapiInitFlags,System.Single,System.Single,ManagedBass.Wasapi.WasapiProcedure,System.IntPtr)" /> call.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.Format">
            <summary>
            The device's sample format used.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.Frequency">
            <summary>
            The sample rate used.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.Channels">
            <summary>
            The number of channels used (1 = mono, 2 = stereo, etc.).
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.BufferLength">
            <summary>
            The buffer size in bytes.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.MaxVolume">
            <summary>
            The maximum volume setting in dB.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.MinVolume">
            <summary>
            The minimum volume setting in dB.
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.VolumeStep">
            <summary>
            The volume step size in dB. 
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.IsEventDriven">
            <summary>
            Is the device used in event-driven mode?
            </summary>
        </member>
        <member name="P:ManagedBass.Wasapi.WasapiInfo.IsExclusive">
            <summary>
            Is the device used in exclusive mode?
            </summary>
        </member>
    </members>
</doc>
